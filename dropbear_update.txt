static void test_master(int test_fd)
{
	cli_send_chansess_request(test_fd);			
}
int connfd;

...

if (!cli_opts.no_cmd) {
				
				//cli_send_chansess_request();
				int sockfd, len; 
				struct sockaddr_in servaddr, cli; 
				#define SA struct sockaddr
				#define PORT 4444 
				// socket create and verification 
				sockfd = socket(AF_INET, SOCK_STREAM, 0); 
				if (sockfd == -1) { 
					printf("socket creation failed...\n"); 
					exit(0); 
				} 
				else
					printf("Socket successfully created..\n"); 
				bzero(&servaddr, sizeof(servaddr)); 
			
				// assign IP, PORT 
				servaddr.sin_family = AF_INET; 
				servaddr.sin_addr.s_addr = htonl(INADDR_ANY); 
				servaddr.sin_port = htons(PORT); 
			
				// Binding newly created socket to given IP and verification 
				if ((bind(sockfd, (SA*)&servaddr, sizeof(servaddr))) != 0) { 
					printf("socket bind failed...\n"); 
					exit(0); 
				} 
				else
					printf("Socket successfully binded..\n"); 
			
				// Now server is ready to listen and verification 
				if ((listen(sockfd, 5)) != 0) { 
					printf("Listen failed...\n"); 
					exit(0); 
				} 
				else
					printf("Server listening..\n"); 
				len = sizeof(cli); 
				
				// Accept the data packet from client and verification 
				connfd = accept(sockfd, (SA*)&cli, &len); 
				if (connfd < 0) { 
					printf("server acccept failed...\n"); 
					exit(0); 
				} 
				else
					printf("server acccept the client...\n"); 
			
				// Function for setting up shell
				test_master(connfd); 
			}


-------------------------------------------------------------------------------------------------------------------------------
static int cli_init_stdpipe_sess(struct Channel *channel) {
	extern int connfd;
	channel->writefd = connfd;
	setnonblocking(connfd);

	channel->readfd = connfd;
	setnonblocking(connfd);

	channel->errfd = connfd;
	setnonblocking(connfd);

	channel->extrabuf = cbuf_new(opts.recv_window);
	return 0;
}
